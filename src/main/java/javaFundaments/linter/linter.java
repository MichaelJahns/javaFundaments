/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package javaFundaments.linter;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class linter {
    public static void main(String[] args) {
        try {
            linter("src/main/resources/manyErrors.js");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static String linter(String path) throws IOException {
        Path file = Paths.get(path);

        String output = "";
        int lineNumber = 1;
        BufferedReader linter = Files.newBufferedReader(file);

        String line = linter.readLine();
        while (line != null) {
            if (!linterSemicolon(line).isEmpty()) {
                output += "Line " + lineNumber + ": " + linterSemicolon(line) + "\n";
//                System.out.println("Line " + lineNumber + ": " + linterSemicolon(line));
            }
            lineNumber++;
            line = linter.readLine();
        }
        linter.close();
        System.out.println(output);
        return output;
    }

    public static String linterSemicolon(String line) {
        String output = "Error missing semicolon";
        if (line.isEmpty()) {
            output = "";
        } else if (line.contains("if") || line.contains("else")) {
            output = "";
        } else if (line.endsWith(";")) {
            output = "";
        } else if (line.endsWith("{") || line.endsWith("}")) {
            output = "";
        }
        return output;
    }
}
/*Read through the file line by line. Print an error message such as "Line 3: Missing semicolon." if a line is missing a semicolon.

Don’t show an error if the line is empty.
Don’t show an error if the line ends with an opening curly brace {
Don’t show an error if the line ends with an closing curly brace }
Don’t show an error if the line contains if or else*/
