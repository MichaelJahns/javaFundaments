/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basicLibrary;

import org.junit.Test;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import static basicLibrary.Library.*;
import static junit.framework.TestCase.assertEquals;
import static junit.framework.TestCase.assertTrue;

public class LibraryTest {

    @Test
    public void testHashSet() {
        int[][] weatherData = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        Set<Integer> expected = new HashSet<>(Arrays.asList(51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 70, 71, 72));

        assertEquals(expected, hashSet(weatherData));
    }

    @Test
    public void testRollLength() {
        assertEquals(1, roll(1).length);
        assertEquals(6, roll(6).length);
        assertEquals(10, roll(10).length);
        //for the overloaded roll
        assertEquals(5, roll(5, 20).length);
        assertEquals(10, roll(10, 2).length);
        assertEquals(3, roll(3, 3).length);
    }

    @Test
    public void testRollRange() {
        int minRoll = 1000;
        int maxRoll = -1;

        int[] testStudy = roll(1000);
        for (int i = 0; i < 1000; i++) {
            if (testStudy[i] > maxRoll) {
                maxRoll = testStudy[i];
            }
            if (testStudy[i] < minRoll) {
                minRoll = testStudy[i];
            }
            assertTrue("Roll at " + i + " is out of range", 1 <= testStudy[i] && testStudy[i] <= 6);
        }
        assertTrue("Results: min = " + minRoll + " " + "max = " + maxRoll, minRoll == 1 && maxRoll == 6);

        //Tests for overloaded Roll
        int minRollOverload = 1000;
        int maxRollOverload = -1;
        int[] testStudyOverload = roll(1000, 20);
        for (int i = 0; i < 1000; i++) {
            if (testStudyOverload[i] > maxRollOverload) {
                maxRollOverload = testStudyOverload[i];
            }
            if (testStudyOverload[i] < minRollOverload) {
                minRollOverload = testStudyOverload[i];
            }
            assertTrue("Roll at" + i + "is out of range", 1 <= testStudyOverload[i] && testStudyOverload[i] <= 20);
        }
        assertTrue("Results: minRollOverload = " + minRollOverload + " " + "maxRollOverload = " + maxRollOverload, minRollOverload == 1 && maxRollOverload == 20);


    }

    @Test
    public void testContainsDuplicates() {
        assertEquals(true, containsDuplicates(new int[]{3, 3, 3, 3}));
        assertEquals(false, containsDuplicates(new int[]{1, 2, 3, 4}));
    }

    @Test
    public void testCalculateAverages() {
        assertEquals(3, calculateAverage(new int[]{1, 2, 3, 4, 5}));
        assertEquals(5, calculateAverage(new int[]{5, 5, 5, 5, 5}));
        assertEquals(39, calculateAverage(new int[]{100, 33, 6, 18}));
    }

    @Test
    public void testLowestAverageArray() {
        int masterArray[][] =
                {
                        {1, 2, 3, 4, 5},
                        {10, 20, 30, 40, 50},
                        {0, 0, 0, 0, 10}
                };
        int[] expected = {0, 0, 0, 0, 10};
        //Manually testing this passes, I think I have structure my test wrong.
        assertTrue(Arrays.equals(expected, lowestAverageArray(masterArray)));
    }

    @Test
    public void testFindIndex() {
        int[] testArray1 = {1, 2, 3, 4, 5};
        int[] testArray2 = {5};
        int[] testArray3 = {100, 35, 99, 0, -39};
        //int[] testArray4 = new int[10];

        assertEquals(3, findIndex(testArray1, 4));
        assertEquals(0, findIndex(testArray2, 5));
        assertEquals(2, findIndex(testArray3, 99));

        //Does not work for an array where a value appears multiple times
        //assertEquals(0, findIndex(testArray1, 1));

    }

    @Test
    public void testFindSmallest() {
        int[] testArray1 = {1, 2, 3, 4, 5};
        int[] testArray2 = {9, 4, 7, 2, 5};
        int[] testArray3 = new int[10];

        assertEquals(1, findSmallest(testArray1));
        assertEquals(2, findSmallest(testArray2));
        assertEquals(0, findSmallest(testArray3));
    }
}


